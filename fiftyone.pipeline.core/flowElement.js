/* ********************************************************************
 * Copyright (C) 2019  51Degrees Mobile Experts Limited.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 * ******************************************************************** */

const evidenceKeyFilterBase = require("./evidenceKeyFilter");

class flowElement {

    /**
     * Constructor for flowElement class
     *
     * @param {Object} options
     * @param {String} options.dataKey the dataKey the flowElement's elementData will be stored under
     * @param {Function} options.processInternal callback to act on flowData
     * @param {Object} options.properties list of properties including metadata
     * @param {{Function(new:evidenceKeyFilter)}} options.evidenceKeyFilter an instance of an evidenceKeyFilter
    */
    constructor(
        {
            processInternal,
            dataKey,
            properties = {},
            evidenceKeyFilter

        } = {}) {

        this.dataKey = dataKey;

        if (processInternal) {

            this.processInternal = processInternal;

        }

        this.properties = properties;

        if (evidenceKeyFilter) {

            this.evidenceKeyFilter = evidenceKeyFilter;

        } else {

            this.evidenceKeyFilter = new evidenceKeyFilterBase();

        }

        this.registrationCallbacks = [];

        // List of pipelines the flowElement has been added to
        this.pipelines = [];

    }

    /**
     * Function to be called when a flowElement is added to pipeline, runs through any registrationCallbacks on the flowElement     
    * */
    onRegistration(pipeline, flowElement) {

        this.registrationCallbacks.forEach(function (registrationCallback) {

            registrationCallback(pipeline, flowElement);

        });

    }

    /**
     * Internal process function for a particular flowElement called (via the flowElement.process() method) when flowData generated by a pipleline is processsed. Overriden by instances of this base class
    */
    processInternal() {

        return true;

    }

    /**
     * To allow actions to take place before and after a flowElement's processInternal function runs, a process wrapper is run first
    */
    process(flowData) {

        return Promise.resolve(this.processInternal(flowData));

    }

    /**
     * Call this function to update the properties meta database in all the pipelines this flowElement has been added to
    */
    updateProperties() {

        let flowElement = this;

        let updates = [];

        this.pipelines.forEach(function (pipeline) {

            updates.push(pipeline.updatePropertyDataBaseForElement(flowElement));

        });

        return Promise.all(updates);

    }

    /**
     * Get a flowElement's properties. By default returns a promise wrapped version of the object's properties list
     * Can return standard value or promise
    */
    getProperties() {

        return this.properties;

    }

}

module.exports = flowElement;
