/// <reference types="node" />
export = PipelineBuilder;
/**
 * @typedef {import('./flowElement')} FlowElement
 * @typedef {import('events').EventEmitter} EventEmitter
 */
/**
 * A PipelineBuilder generates a Pipeline object
 * Before construction of the Pipeline, FlowElements are added to it
 * There are also options for how JavaScript is output from the Pipeline
 */
declare class PipelineBuilder {
    /**
     * Constructor for pipeline builder
     *
     * @param {object} settings settings for the pipeline being
     * constructed
     * @param {boolean} settings.addJavaScriptBuilder Whether to
     * automatically add the JSONBundler, JavaScriptBuilder
     * and Sequence elements needed to output JavaScript
     * from the system and generate an endpoint for fetching the properties
     * generated by a pipeline from the client side. This is
     * true by default.
     * @param {boolean} settings.useSetHeaderProperties Whether to
     * automatically add the SetHeadersElement needed to request additional
     * HTTP headers from the client side. This is true by default.
     * @param {typeof import('./javascriptbuilder').prototype.settings} settings.javascriptBuilderSettings
     * The settings to pass to the JavaScriptBuilder.
     * See JavaScriptBuilder class for details.
     * @param {EventEmitter} settings.eventEmitter A logger for emitting messages for pipeline
     */
    constructor(settings?: {
        addJavaScriptBuilder: boolean;
        useSetHeaderProperties: boolean;
        javascriptBuilderSettings: typeof import('./javascriptbuilder').prototype.settings;
        eventEmitter: EventEmitter;
    });
    /**
     * @type {FlowElement[]}
     */
    flowElements: FlowElement[];
    addJavaScriptBuilder: boolean;
    javascriptBuilderSettings: {
        objName: string;
        protocol: string;
        host: string;
        endPoint: string;
        enableCookies: boolean;
        minify: boolean;
    };
    useSetHeaderProperties: boolean;
    eventEmitter: import("events");
    /**
     * Helper that loads a JSON configuration file from
     * the filesystem and calls pipelineBuilder.buildFromConfiguration
     *
     * @param {string} configPath path to a JSON configuration file
     * @returns {Pipeline} the constructed pipeline
     */
    buildFromConfigurationFile(configPath: string): Pipeline;
    /**
     * Create a pipeline from a JSON configuration
     *
     * @param {object} config a JSON configuration object
     * @returns {Pipeline} the constructed pipeline
     */
    buildFromConfiguration(config: object): Pipeline;
    /**
     * Add required elements to an existing FlowElement array
     *
     * @param {FlowElement[]} flowElements array of elements to add to
     * @returns {FlowElement[]} resulting array with required elements
     */
    addRequiredElements(flowElements: FlowElement[]): FlowElement[];
    /**
     * Internal function used to first check if the
     * JavaScript elements should be added to the pipeline
     * and add them if requested.
     *
     * @returns {FlowElement[]} list of JavaScript related
     * FlowElements
     */
    getJavaScriptElements(): FlowElement[];
    /**
     * Internal function used to first check if the
     * HTTP elements should be added to the pipeline
     * and add them if requested.
     *
     * @returns {FlowElement[]} list of HTTP related
     * FlowElements
     */
    getHttpElements(): FlowElement[];
    /**
     * Add a single flowElement to be executed in series
     *
     * @param {FlowElement} flowElement flowElement to add to the
     * Pipeline
     * @returns {PipelineBuilder} Pipeline builder for easy chaining
     */
    add(flowElement: FlowElement): PipelineBuilder;
    /**
     * Add an array of flowElements to be executed in parallel
     *
     * @param {FlowElement[]} flowElements array of FlowElements
     * to add to the Pipeline (to be exeuted in parallel)
     * @returns {PipelineBuilder} Pipeline builder for easy chaining
     */
    addParallel(flowElements: FlowElement[]): PipelineBuilder;
    /**
     * Build the pipeline from the flowElements that have been added
     *
     * @returns {Pipeline} The constructed Pipeline
     */
    build(): Pipeline;
}
declare namespace PipelineBuilder {
    export { FlowElement, EventEmitter };
}
type FlowElement = import('./flowElement');
import Pipeline = require("./pipeline");
type EventEmitter = import('events').EventEmitter;
