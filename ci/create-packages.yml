trigger:
  - master
  - develop
  - release/*  
  - hotfix/*

# Don't trigger for a pull request
pr: none

# Include shared variables
variables:
- template: shared-variables.yml
- group: CIAutomation
# Access token for the git repository. Used by the git tag task.
- name: system_accesstoken
  value: $(System.AccessToken)

resources:
  repositories:
    - repository: ciTemplates # Id of the repository used to reference to in this script
      type: git
      name: common-ci # Name of the actual repository

stages:

- stage: CreatePackages
  displayName: Create Packages

  jobs:
  - template: shared-git-version-job.yml@ciTemplates
    parameters:
      imageName: $(linuxImage)

  - job: Create
    displayName: Create Packages
    dependsOn: Versioning
    condition: and(succeeded(), ne(variables['CreatePackages'], 'Off'))

    pool:
      vmImage: $(linuxImage)
  
    variables:
      - name: GitVersionSemVer
        value: $[ dependencies.Versioning.outputs['SetGitVersionVars.GitVersionSemVer'] ]
  
    steps:
    # The lines below are needed to allow the pipeline access to the
    # OAuth access token that controls write access to the git repository. 
    # (Required for GitTag task)
    - checkout: self
      lfs: true
      submodules: recursive
      persistCredentials: true
    
    # All modules that reference other pipeline modules in this repository
    # have package.json files where the dependency is defined relative to 
    # the local file system.
    # We need to change these dependencies to 'normal' remote NPM references 
    # before creating the packages.
    - script: |    
        rm -f fiftyone.pipeline.cloudrequestengine/package.json
        rm -f fiftyone.pipeline.engines/package.json
        rm -f fiftyone.pipeline.engines.fiftyone/package.json
        if [ -f fiftyone.pipeline.cloudrequestengine/package.json ] && \
           [ -f fiftyone.pipeline.engines/package.json] && \
           [ -f fiftyone.pipeline.engines.fiftyone/package.json ]; then
          echo "ERROR: Failed to remove package.json files."
          exit 1
        fi
    
        mv fiftyone.pipeline.cloudrequestengine/remote_package.json fiftyone.pipeline.cloudrequestengine/package.json
        mv fiftyone.pipeline.engines/remote_package.json fiftyone.pipeline.engines/package.json
        mv fiftyone.pipeline.engines.fiftyone/remote_package.json fiftyone.pipeline.engines.fiftyone/package.json
        if [ ! -f fiftyone.pipeline.cloudrequestengine/package.json ] && \
           [ ! -f fiftyone.pipeline.engines/package.json] && \
           [ ! -f fiftyone.pipeline.engines.fiftyone/package.json ]; then
          echo "ERROR: Failed to update package.json files."
          exit 1
        fi
      displayName: 'Switch to package.json that has remote dependencies'
      failOnStderr: true
  
    # Set version number for each package.
    - task: Npm@1
      displayName: 'npm version fiftyone.pipeline.core'
      inputs:
        command: custom
        workingDir: fiftyone.pipeline.core
        verbose: true
        customCommand: version $(GitVersionSemVer)    
      continueOnError: true
      condition: succeededOrFailed()
    
    - task: Npm@1
      displayName: 'npm version fiftyone.pipeline.engines'
      inputs:
        command: custom
        workingDir: fiftyone.pipeline.engines
        verbose: true
        customCommand: version $(GitVersionSemVer)    
      continueOnError: true
      condition: succeededOrFailed()
    
    - task: Npm@1
      displayName: 'npm version fiftyone.pipeline.engines.fiftyone'
      inputs:
        command: custom
        workingDir: fiftyone.pipeline.engines.fiftyone
        verbose: true
        customCommand: version $(GitVersionSemVer)    
      continueOnError: true
      condition: succeededOrFailed()
    
    - task: Npm@1
      displayName: 'npm version fiftyone.pipeline.cloudrequestengine'
      inputs:
        command: custom
        workingDir: fiftyone.pipeline.cloudrequestengine
        verbose: true
        customCommand: version $(GitVersionSemVer)    
      continueOnError: true
      condition: succeededOrFailed()
    
    # Create packages
    - script: |
        cd fiftyone.pipeline.core
        npm pack
        if [ $? -ne 0]; then
          echo "Failed to pack fiftyone.pipeline.core."
          exit 1
        fi
        cd ..
        
        cd fiftyone.pipeline.engines
        npm pack
        if [ $? -ne 0]; then
          echo "Failed to pack fiftyone.pipeline.engines."
          exit 1
        fi
        cd ..
        
        cd fiftyone.pipeline.engines.fiftyone
        npm pack
        if [ $? -ne 0]; then
          echo "Failed to pack fiftyone.pipeline.engines.fiftyone."
          exit 1
        fi
        cd ..
        
        cd fiftyone.pipeline.cloudrequestengine
        npm pack
        if [ $? -ne 0]; then
          echo "Failed to pack fiftyone.pipeline.cloudrequestengine."
          exit 1
        fi
      displayName: 'Create npm packages for later release'
      condition: succeededOrFailed()
    
    # Create artifact containing packages.
    - task: CopyFiles@2
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)'
        contents: '**/*.tgz' 
        targetFolder: $(Build.ArtifactStagingDirectory)/npm
      displayName: 'Copy tgz files'
      condition: succeededOrFailed()
      
    - script: |
        ls -r $(Build.ArtifactStagingDirectory)/npm/fiftyone.pipeline.core/*fiftyone.pipeline.core*.tgz
        export rc1=$?
        ls -r $(Build.ArtifactStagingDirectory)/npm/fiftyone.pipeline.engines/*fiftyone.pipeline.engines*.tgz
        export rc2=$?
        ls -r $(Build.ArtifactStagingDirectory)/npm/fiftyone.pipeline.engines.fiftyone/*fiftyone.pipeline.engines.fiftyone*.tgz
        export rc3=$?
        ls -r $(Build.ArtifactStagingDirectory)/npm/fiftyone.pipeline.cloudrequestengine/*fiftyone.pipeline.cloudrequestengine*.tgz
        export rc4=$?
        if [ $rc1 -ne 0 ] || \
           [ $rc2 -ne 0 ] || \
           [ $rc3 -ne 0 ] || \
           [ $rc4 -ne 0 ]; then
           echo "ERROR: Could not find all packaged modules."
           exit 1
        fi
      displayName: 'List artifact staging contents'
      condition: succeededOrFailed()
      failOnStderr: true
    
    # Publish artifacts to DevOps
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/npm'
        artifactName: npm
      displayName: 'Publish npm artifact'
      condition: succeeded()

  - template: shared-git-tag-job.yml@ciTemplates
    parameters:
      imageName: $(linuxImage)
      jobDependencies: [Versioning,Create]